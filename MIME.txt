using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Solution
{
    static void Main(string[] args)
    {
        int N = int.Parse(Console.ReadLine());// Number of elements which make up the association table.
        int Q = int.Parse(Console.ReadLine());// Number Q of file names to be analyzed.
       var MType = new Dictionary<string, string>();
        for (int i = 0; i < N; i++)
        {
            string[] inputs = Console.ReadLine().Split(' ');
            string EXT = inputs[0].ToLower(); // file extension
            string MT = inputs[1]; // MIME type.
            string exists;
            if (MType.TryGetValue(MT, out exists)== false){
                MType.Add('.' + EXT,MT);
            }
        }
            for (int i = 0; i < Q; i++)
            {
                string FNAME = Console.ReadLine();
                string exe = Path.GetExtension(FNAME).ToLower();

                int    result = 0;
                foreach( var pair in MType)
                {
                    if (exe == "")
                    {
                        break;
                    }
                
                    string key = pair.Key;
                    string value = pair.Value;
                    if (exe ==(key))
                    {
                        Console.WriteLine(value);
                        result = 1;
                        break;
                    }
                }
            if (result == 0){
            Console.WriteLine("UNKNOWN");
            }
        }


        // Write an action using Console.WriteLine()
        // To debug: Console.Error.WriteLine("Debug messages...");


        // For each of the Q filenames, display on a line the corresponding MIME type. If there is no corresponding type, then display UNKNOWN.
        
    }
}